@page "/library/edit/{BookID}"


@inject IBookRepo _repo
@inject IAuthoRepo _authRepo

@inject NavigationManager UriHelper

@if (int.Parse(BookID) < 1 || string.IsNullOrWhiteSpace(BookID))
{
    <BSAlert Color="Color.Danger">Invalid Boook Tag </BSAlert>
}
else if (CurrentBook == null)
{
    <BSAlert Color="Color.Danger">Book does not exist </BSAlert>
}
else
{

    <EditForm Model="CurrentBook" OnValidSubmit="UpdateBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Book Title</label>
            <InputText @bind-Value="CurrentBook.Title" class="form-control" id="title" />
        </div>
        <div class="form-group">
            <label for="isbn">Bar Code(ISBN)</label>
            <InputText @bind-Value="CurrentBook.Isbn" class="form-control" id="isbn" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="CurrentBook.Price" class="form-control" id="price" />
        </div>
        <div class="form-group">
            <label for="author">Authors</label>
            <select @bind="CurrentBook.AuthorId" class="form-control" id="author">
                <option value="">-- Select Author --</option>
                @if (ListAuthor != null)
                {
                    foreach (var author in ListAuthor)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary</label>
            <InputTextArea @bind-Value="CurrentBook.Summary" class="form-control" id="summary" />
        </div>
        <div class="form-group">
            <label for="bookcover">Book Cover Photo</label>
            <InputFile OnChange="IMGSelection" />
            @if (isInvalidFileType)
            {
                <BSAlert Color="Color.Danger">Something went wrong. See Image Type </BSAlert>
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (string.IsNullOrWhiteSpace(CurrentBook.Image) == false)
            {
                <img src="@string.Format("data:image/png;base64,{0}", CurrentBook.Fileimg)" style="height:100px; width:100px" alt="Not Img" />
            }
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Save
        </button>
        <button @onclick="NavigateToOverview" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back
        </button>
    </EditForm>

}





<h3>BookUpdate</h3>





@code {


    [Parameter]
    public string BookID { get; set; } = "";

    protected BookModel CurrentBook = new BookModel();
    private IFileListEntry file;
    private MemoryStream msFile;
    private string imageDataURL;
    private bool isInvalidFileType = false;
    private bool isSuccess = true;
    private bool isChanged = false;

    private IList<AuthorModel> ListAuthor;



    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(BookID);
        await GetBook(id);
        ListAuthor = await _authRepo.GetAll(Endpoint.AuthorEndpoint);


    }

    protected async Task GetBook(int BookID)
    {

        CurrentBook = await _repo.Get(Endpoint.LibraryEndpoint, BookID);

    }

    private async Task UpdateBook()
    {

        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";



                CurrentBook.Image = picName;
                CurrentBook.Fileimg = Convert.ToBase64String(msFile.ToArray());
            }
            else if(isChanged == true && file == null)
            {

                CurrentBook.Image = string.Empty;
            }

            isSuccess = await _repo.Update(Endpoint.LibraryEndpoint, CurrentBook,CurrentBook.Id);
            if (isSuccess)
            {
                //_toastService.ShowSuccess("Book Created Successfully", "");
                NavigateToOverview();
            }
        }

    }


    private async Task IMGSelection(IFileListEntry[] files)
    {
        isChanged = true;
        file = files.FirstOrDefault();
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                msFile = new MemoryStream();
                await file.Data.CopyToAsync(msFile);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }


    private void NavigateToOverview()
    {
        UriHelper.NavigateTo("/library");
    }





}
