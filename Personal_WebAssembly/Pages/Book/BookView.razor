@page  "/library"

@inject IBookRepo _repo
@inject NavigationManager UriHelper


<h3>Library</h3>

@if (bookModels == null || bookModels.Count < 1)
{
    <p><em>Loading...</em></p>
    <br>
    <Wave />
}
else
{

    <div class="row mb-3">
        <div class="col-md-7">
            <AuthorizeView>
                <Authorized>
                    <p>
                        <NavLink href="@($"/library/create")">
                            <BSButton Class="btn btn-dark">Add New Book</BSButton>

                        </NavLink>
                    </p>
                </Authorized>
                <NotAuthorized>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
  

    <BSTable IsResponsive="true" class='table'>

        <thead class="thead-light">
            <tr>
                <th>Picture</th>
                <th>Title</th>
                <th> Year</th>
                <th> Price</th>
                <th>Bar Code</th>
                <th>Author Name</th>

                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in bookModels)
            {
                <tr>
                    <td>
                        <img src="@string.Format("data:image/png;base64,{0}", data.Fileimg)" style="height:80px; width:80px" alt="Not Img" />
                    </td>
                    <td>@data.Title</td>
                    <td>@data.Year</td>
                    <td>@data.Price</td>
                    <td>@data.Isbn</td>
                    @if (data.Author == null)
                    {
                        <td>No Author for this Book</td>
                    }
                    else
                    {
                        <td>@data.Author.Firstname @data.Author.Lastname</td>
                    }

                    <td>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-eye text-primary" @onclick="@(async () => await ViewBook(data.Id))"></BSButton>

                        <AuthorizeView>
                            <Authorized>

                                <NavLink href="@($"/library/edit/{data.Id}")">
                                    <i class="oi oi-pencil text-warning"></i>
                                </NavLink>
                                <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-trash text-danger" @onclick="@(async () => await DeleteBook(data.Id))"></BSButton>

                            </Authorized>
                        </AuthorizeView>
                    </td>

                </tr>
            }

        </tbody>


    </BSTable>
    //View
    <div>

        <BSModal @bind-IsOpen="isView" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
            <BSModalHeader @onclick="CloseModal">@modalTitle</BSModalHeader>
            <BSModalBody>
                <div class="col-md-12">
                    @if (isDelete == true)
                    {
                        <BSAlert Color="Color.Danger">Please review carefully before deleting.</BSAlert>

                    }
                    <hr />
                    <h5>information</h5>
                    <hr />
                    <BSTable IsResponsive="true" class="table">
                        <tr>
                            <td>Id</td>
                            <td>@CurrentBook.Id</td>
                        </tr>

                        <tr>
                            <td>Title</td>
                            <td>@CurrentBook.Title</td>
                        </tr>
                        <tr>
                            <td>Year</td>
                            <td>@CurrentBook.Year</td>
                        </tr>
                        <tr>
                            <td>Bar Code Number(ISBN)</td>
                            <td>@CurrentBook.Isbn</td>
                        </tr>

                        <tr>
                            <td>Author</td>
                            @if (CurrentBook.Author == null)
                            {
                                <td>No Author for this Book</td>
                            }
                        </tr>



                    </BSTable>
                    <div class="col-4">
                        <img src="@string.Format("data:image/png;base64,{0}", CurrentBook.Fileimg)" style="height:300px; width:300px" alt="Not Img" />
                        @*how to make to euro dont know  https://www.completecsharptutorial.com/csharp-articles/string-format-c-everything-you-need-to-know.php *@
                        <h3 class="text-center text-info">@string.Format("{0:C}", CurrentBook.Price)</h3>
                    </div>

                </div>
                <div class="form-group">
                    @if (isDelete)
                    {
                        <button type="button" class="btn btn-danger" @onclick="(async () => await RemoveBook(CurrentBook.Id))">Delete</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    }
                    else
                    {

                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    }

                </div>



            </BSModalBody>

        </BSModal>




    </div>




}



@code {


    protected bool isFailed { get; set; }
    protected bool isView { get; set; }
    protected bool isAdd { get; set; }
    protected bool isDelete { get; set; }
    protected string modalTitle { get; set; }

    private IList<BookModel> bookModels;
    protected BookModel CurrentBook = new BookModel
    {
        Title = String.Empty,
        Year = null,
        Isbn = String.Empty,
        Summary = String.Empty,
        Image = String.Empty,
        Price = null,
        AuthorId = null,
        Author = new AuthorModel()

    };

    protected override async Task OnInitializedAsync()
    {
        await GetAllBook();

    }

    public async Task GetAllBook()
    {
        bookModels = await _repo.GetAll(Endpoint.LibraryEndpoint);
        foreach (var data in bookModels)
        {
            var test = data.Fileimg;
            var testim = data.Image;

        }

    }

    protected async Task ViewBook(int BookID)
    {

        this.isView = true;
        this.modalTitle = "View Book";
        CurrentBook = await _repo.Get(Endpoint.LibraryEndpoint, BookID);

    }

    protected void CloseModal()
    {

        this.isView = false;
        this.isDelete = false;


        CurrentBook = new BookModel
        {
            Title = String.Empty,
            Year = null,
            Isbn = String.Empty,
            Summary = String.Empty,
            Image = String.Empty,
            Price = null,
            AuthorId = null,
            Author = new AuthorModel()

        };

        StateHasChanged();
    }

    private async Task DeleteBook(int BookID)
    {

        isDelete = true;
        this.isView = true;
        this.modalTitle = "Delete Book";
        CurrentBook = await _repo.Get(Endpoint.LibraryEndpoint, BookID);



    }


    private async Task RemoveBook(int BookID)
    {


        bool isRemoved = await _repo.Delete(Endpoint.LibraryEndpoint, BookID);
        if (isRemoved)
        {

            CloseModal();
            await OnInitializedAsync();
        }
        else
        {
            isFailed = true;
        }
    }




}
