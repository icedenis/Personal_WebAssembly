@page "/library/create"


@inject IBookRepo _repo
@inject IAuthoRepo _authorRepo

@inject NavigationManager _navManager


<h3>Create Book</h3>
<hr />
<br />
@if (!isSuccess)
{
<BSAlert Color="Color.Danger">Something went wrong </BSAlert>
}

<EditForm Model="Model" OnValidSubmit="CreateBook">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText @bind-Value="Model.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="isbn">Bar Code(ISBN)</label>
        <InputText @bind-Value="Model.Isbn" class="form-control" id="isbn" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Model.Price" class="form-control" id="price" />
    </div>
    <div class="form-group">
        <label for="author">Authors</label>
        <select @bind="Model.AuthorId" class="form-control" id="author">
            <option value="">-- Select Author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.Firstname @author.Lastname</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="Model.Summary" class="form-control" id="summary" />
    </div>
    <div class="form-group">
        <label for="bookcover">Book Cover Photo</label>
        <InputFile OnChange="IMGSelection" />
        @if (isInvalidFileType)
        {
             <BSAlert Color="Color.Danger">Something went wrong. See Image Type </BSAlert>
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Save
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back
    </button>
</EditForm>

@code {
    private BookModel Model = new BookModel();
    private IList<AuthorModel> Authors;
    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;
    private MemoryStream msFile;

    protected override async Task OnInitializedAsync()
    {
        Authors = await _authorRepo.GetAll(Endpoint.AuthorEndpoint);
    }

    private async Task CreateBook()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

           

                Model.Image = picName;
                Model.Fileimg = Convert.ToBase64String(msFile.ToArray());
            }

            isSuccess = await _repo.Create(Endpoint.LibraryEndpoint, Model);
            if (isSuccess)
            {
                //_toastService.ShowSuccess("Book Created Successfully", "");
                BackToList();
            }
        }
    }

    private async Task IMGSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            var extention = Path.GetExtension(file.Name);
            if (extention.Contains("jpg") || extention.Contains("png") || extention.Contains("jpeg"))
            {
                msFile = new MemoryStream();
                await file.Data.CopyToAsync(msFile);

                var reader = new StreamReader(file.Data);
                //thats string which i will transfer to the api Fileimg
                var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }


    private void BackToList()
    {
        _navManager.NavigateTo("/library");
    }
}
